{"version":3,"sources":["components/ShowWishes.js","components/PostWish.js","App.js","reportWebVitals.js","index.js"],"names":["ShowWishes","props","state","allWishes","prevProps","prevState","this","setState","Fragment","className","map","wishObj","wish","length","src","style","width","height","alt","username","id","Component","backend_url","PostWish","submitPost","errorMessage","console","log","form","axios","post","then","response","getAllWishes","catch","err","error","data","message","handleSubmit","event","preventDefault","validator","allValid","showMessages","handleChange","name","target","value","showMessageFor","empId","SimpleReactValidator","autoForceUpdate","validators","uname","rule","val","params","helpers","testRegex","indexOf","messageReplace","replace","toSentence","required","get","paddingBottom","onSubmit","marginRight","placeholder","onChange","rows","type","disabled","textAlign","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAGqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAW,EAAKF,MAAME,WAHP,E,sDAOnB,SAAmBC,EAAWC,GACxBD,EAAUD,YAAcG,KAAKL,MAAME,WACrCG,KAAKC,SAAS,CAAEJ,UAAWG,KAAKL,MAAME,c,oBAI1C,WACE,OACE,cAAC,IAAMK,SAAP,UACE,qBAAKC,UAAU,QAAf,SACGH,KAAKJ,MAAMC,UAAUO,KAAI,SAAAC,GAAO,OAE7B,cADF,CACE,OAAKF,UAAU,aAAf,UACGE,EAAQC,KAAKC,OAAS,GACrB,qBACEC,IAAI,WACJC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACjCC,IAAI,SAEJP,EAAQC,KAAKC,OAAS,GACxB,qBACEC,IAAI,WACJC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACjCC,IAAI,SAGN,qBAAKJ,IAAI,WAAWI,IAAI,SAG1B,qBAAKT,UAAU,WAAf,SACE,+BAAKE,EAAQC,KAAb,IAAmB,uBAAnB,MAA4BD,EAAQQ,gBAlBPR,EAAQS,e,GApBfC,aCElCC,EAAc,wBACCC,E,kDACnB,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAiDRuB,WAAa,WACX,EAAKjB,SAAS,CAAEkB,aAAc,KAC9BC,QAAQC,IAAI,EAAKzB,MAAM0B,MACvBC,IACGC,KAAKR,EAAY,SAAU,EAAKpB,MAAM0B,MACtCG,MAAK,SAAAC,GACJ,EAAKC,kBAENC,OAAM,SAAAC,GACL,IAAIC,EAAQD,EAAIH,SACZG,EAAIH,SAASK,KAAKC,QAClB,8BAEJ,EAAK/B,SAAS,CACZkB,aAAcW,QAhEH,EAqEnBG,aAAe,SAAAC,GACbA,EAAMC,iBACF,EAAKC,UAAUC,WACjB,EAAKnB,aAEL,EAAKkB,UAAUE,gBA1EA,EA8EnBC,aAAe,SAAAL,GACb,IAAIM,EAAON,EAAMO,OAAOD,KACpBE,EAAQR,EAAMO,OAAOC,MACzB,EAAKN,UAAUO,eAAeT,EAAMO,OAAOD,MAE3C,EAAKvC,SAAS,CACZqB,KAAK,2BACA,EAAK1B,MAAM0B,MADZ,kBAEDkB,EAAOE,OApFZ,EAAK9C,MAAQ,CACXC,UAAW,GACXyB,KAAM,CACJT,SAAU,GACV+B,MAAO,GACPtC,KAAM,IAERa,aAAc,IAEhB,EAAKiB,UAAY,IAAIS,IAAqB,CACxCC,gBAAgB,eAChBC,WAAY,CACVC,MAAO,CAELhB,QAAS,6BACTiB,KAAM,SAACC,EAAKC,EAAQf,GAClB,OACEA,EAAUgB,QAAQC,UAAUH,EAAK,oBACR,IAAzBC,EAAOG,QAAQJ,IAGnBK,eAAgB,SAACvB,EAASmB,GAAV,OACdnB,EAAQwB,QAAQ,UAAW,EAAKJ,QAAQK,WAAWN,KACrDO,UAAU,MAzBC,E,gDA+BnB,WAAgB,IAAD,OACbnC,IACGoC,IAAI3C,EAAY,UAChBS,MAAK,SAAAC,GACJN,QAAQC,IAAIK,EAASK,MACrB,EAAK9B,SAAS,CAAEJ,UAAW6B,EAASK,UAErCH,OAAM,SAAAC,GACL,IAAIC,EAAQD,EAAIH,SACZG,EAAIH,SAASK,KAAKC,QAClB,0BACJ,EAAK/B,SAAS,CAAEkB,aAAcW,EAAOjC,UAAW,U,+BAItD,WACEG,KAAK2B,iB,oBA4CP,WACE,OACE,cAAC,IAAMzB,SAAP,UACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,gCAAf,SACE,sBAAKA,UAAU,mCAAqCM,MAAO,CAACC,MAAM,OAAlE,UACE,sBAAKP,UAAU,YAAYM,MAAO,CAACmD,cAAe,OAAlD,UAEE,uBAAMzD,UAAU,cAAc0D,SAAU7D,KAAKiC,aAA7C,UAEE,qBAAK9B,UAAU,aAAf,SAIE,iCACE,uBACEA,UAAU,oBACVM,MAAO,CAACqD,YAAY,MAAOpD,MAAM,QACjCI,GAAG,WACH0B,KAAK,WACLuB,YAAY,mBACZC,SAAUhE,KAAKuC,mBA6BrB,qBAAKpC,UAAU,kBAAf,SACE,iCACE,0BACEA,UAAU,oBACVM,MAAO,CAACC,MAAM,QACdI,GAAG,OACH0B,KAAK,OACLuB,YAAY,oBACZE,KAAK,IACLD,SAAUhE,KAAKuC,mBAarB,wBACE2B,KAAK,SACL/D,UAAU,uBACVqC,KAAK,WACL2B,UAAWnE,KAAKoC,UAAUC,WAJ5B,0BASF,sBAAMG,KAAK,eAAerC,UAAU,cAApC,SACGH,KAAKJ,MAAMuB,kBAGhB,sBAAKhB,UAAU,SAAf,UACE,qBACEqC,KAAK,gBACLrC,UAAU,6BACVM,MAAO,CAAC2D,UAAU,QAHpB,SAKGpE,KAAKoC,UAAUJ,QACd,WACAhC,KAAKJ,MAAM0B,KAAKT,SAChB,2BAUJ,qBAAK2B,KAAK,YAAYrC,UAAU,8BAA8BM,MAAO,CAAC2D,UAAU,QAAhF,SACGpE,KAAKoC,UAAUJ,QACd,OACAhC,KAAKJ,MAAM0B,KAAKhB,KAChB,6BAMR,cAAC,EAAD,CAAYT,UAAWG,KAAKJ,MAAMC,uB,GA/MVkB,aCevBsD,MAhBf,WACE,OACE,eAAC,IAAMnE,SAAP,WACE,qBAAKC,UAAU,aAAf,SACE,qBACEK,IAAI,aACJL,UAAU,SACVM,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,IAAI,OAGR,cAAC,EAAD,QCJS0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.762c1ce6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class ShowWishes extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allWishes: this.props.allWishes,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.allWishes !== this.props.allWishes) {\r\n      this.setState({ allWishes: this.props.allWishes });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"ml-5 \">\r\n          {this.state.allWishes.map(wishObj => (\r\n            // <div className='col' key={wishObj._id}>\r\n              <div className='star-image' key={wishObj.id}>\r\n                {wishObj.wish.length > 50 ? (\r\n                  <img\r\n                    src='star.png'\r\n                    style={{ width: '600px', height: '500px' }}\r\n                    alt='star'\r\n                  />\r\n                ) : wishObj.wish.length > 30 ? (\r\n                  <img\r\n                    src='star.png'\r\n                    style={{ width: '500px', height: '400px' }}\r\n                    alt='atar'\r\n                  />\r\n                ) : (\r\n                  <img src='star.png' alt='star' />\r\n                )}\r\n                {/* <img src='star.png' alt='' /> */}\r\n                <div className='centered'>\r\n                  <h3>{wishObj.wish} <br/> --{wishObj.username}</h3>\r\n                </div>\r\n              </div>\r\n          ))}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport SimpleReactValidator from 'simple-react-validator';\r\nimport ShowWishes from './ShowWishes';\r\nconst backend_url = 'http://localhost:5001'\r\nexport default class PostWish extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allWishes: [],\r\n      form: {\r\n        username: '',\r\n        empId: '',\r\n        wish: '',\r\n      },\r\n      errorMessage: '',\r\n    };\r\n    this.validator = new SimpleReactValidator({\r\n      autoForceUpdate: this,\r\n      validators: {\r\n        uname: {\r\n          // name the rule\r\n          message: 'Not valid Infosys username',\r\n          rule: (val, params, validator) => {\r\n            return (\r\n              validator.helpers.testRegex(val, /^[A-z0-9._]+$/i) &&\r\n              params.indexOf(val) === -1\r\n            );\r\n          },\r\n          messageReplace: (message, params) =>\r\n            message.replace(':values', this.helpers.toSentence(params)), // optional\r\n          required: true, // optional\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  getAllWishes() {\r\n    axios\r\n      .get(backend_url+'/posts')\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.setState({ allWishes: response.data });\r\n      })\r\n      .catch(err => {\r\n        let error = err.response\r\n          ? err.response.data.message\r\n          : 'Not connected to server';\r\n        this.setState({ errorMessage: error, allWishes: [] });\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAllWishes();\r\n  }\r\n\r\n  submitPost = () => {\r\n    this.setState({ errorMessage: '' });\r\n    console.log(this.state.form);\r\n    axios\r\n      .post(backend_url+'/posts', this.state.form)\r\n      .then(response => {\r\n        this.getAllWishes();\r\n      })\r\n      .catch(err => {\r\n        let error = err.response\r\n          ? err.response.data.message\r\n          : 'Not connected to the server';\r\n        // console.log(error)\r\n        this.setState({\r\n          errorMessage: error,\r\n        });\r\n      });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (this.validator.allValid()) {\r\n      this.submitPost();\r\n    } else {\r\n      this.validator.showMessages();\r\n    }\r\n  };\r\n\r\n  handleChange = event => {\r\n    let name = event.target.name;\r\n    let value = event.target.value;\r\n    this.validator.showMessageFor(event.target.name);\r\n\r\n    this.setState({\r\n      form: {\r\n        ...this.state.form,\r\n        [name]: value,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='main'>\r\n          <div className='container-fluid mlr-5s'>\r\n            <div className='d-flex justify-content-center'>\r\n              <div className='card bg-card bg-transparent my-2'   style={{width:'80%'}}>\r\n                <div className='card-body' style={{paddingBottom: '0px'}}>\r\n                  {/* Create the form here */}\r\n                  <form className='form-inline' onSubmit={this.handleSubmit}>\r\n                    {/* Username */}\r\n                    <div className='form-group'>\r\n                      {/* <label htmlFor='username'>\r\n                        Employee Name <span style={{ color: 'red' }}>*</span>\r\n                      </label> */}\r\n                      <center>\r\n                        <input\r\n                          className='form-control ml-1'\r\n                          style={{marginRight:'3vw', width:'20vw'}}\r\n                          id='username'\r\n                          name='username'\r\n                          placeholder='Infosys Username'\r\n                          onChange={this.handleChange}\r\n                        />\r\n                      </center>\r\n                      {/* <div name='usernameError' className='text-danger'>\r\n                        {this.validator.message(\r\n                          'username',\r\n                          this.state.form.username,\r\n                          'required|uname|max:20'\r\n                        )}\r\n                      </div> */}\r\n                    </div>\r\n\r\n                    {/* Employee ID */}\r\n                    {/* <div className='form-group mx-1'>\r\n                      <label htmlFor='empId'>\r\n                        Employee ID <span style={{ color: 'red' }}>*</span>\r\n                      </label>\r\n                      <center>\r\n                        <input\r\n                          className='form-control ml-1'\r\n                          id='empId'\r\n                          name='empId'\r\n                          placeholder='6 digit Employee Id'\r\n                          onChange={this.handleChange}\r\n                        />\r\n                      </center>\r\n                    </div> */}\r\n\r\n                    {/* Wish */}\r\n                    <div className='form-group mx-1'>\r\n                      <center>\r\n                        <textarea\r\n                          className='form-control ml-1'\r\n                          style={{width:'37vw'}}\r\n                          id='wish'\r\n                          name='wish'\r\n                          placeholder='Drop in your Wish'\r\n                          rows='1'\r\n                          onChange={this.handleChange}\r\n                        />\r\n                      </center>\r\n                      {/* <span name='wishError' className='text-danger'>\r\n                        {this.validator.message(\r\n                          'wish',\r\n                          this.state.form.wish,\r\n                          'required|max:75'\r\n                        )}\r\n                      </span> */}\r\n                    </div>\r\n\r\n                    {/* Button */}\r\n                    <button\r\n                      type='submit'\r\n                      className='btn btn-primary mx-1'\r\n                      name='postWish'\r\n                      disabled={!this.validator.allValid()}\r\n                    >\r\n                      Post Wish\r\n                    </button>\r\n                  </form>\r\n                  <span name='errorMessage' className='text-danger'>\r\n                    {this.state.errorMessage}\r\n                  </span>\r\n                </div>\r\n                <div className='d-flex'>\r\n                  <div\r\n                    name='usernameError'\r\n                    className='ml-4 alignleft text-danger'\r\n                    style={{textAlign:'left'}}\r\n                  >\r\n                    {this.validator.message(\r\n                      'username',\r\n                      this.state.form.username,\r\n                      'required|uname|max:20'\r\n                    )}\r\n                  </div>\r\n                  {/* <p name='empIdError' className='aligncenter text-danger'>\r\n                    {this.validator.message(\r\n                      'empId',\r\n                      this.state.form.empId,\r\n                      'required|numeric|size:6'\r\n                    )}\r\n                  </p> */}\r\n                  <div name='wishError' className='mr-5 alignright text-danger' style={{textAlign:'left'}}>\r\n                    {this.validator.message(\r\n                      'wish',\r\n                      this.state.form.wish,\r\n                      'required|max:75'\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n              <ShowWishes allWishes={this.state.allWishes} />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import './App.css';\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PostWish from './components/PostWish';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className='sticky-top'>\r\n        <img\r\n          src='navbar.jpg'\r\n          className='sticky'\r\n          style={{ width: '100%', height: '80px' }}\r\n          alt=''\r\n        />\r\n      </div>\r\n      <PostWish />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}